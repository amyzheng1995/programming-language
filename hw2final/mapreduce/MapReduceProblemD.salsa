module mapreduce;

import java.lang.Math;
import java.io.*;


behavior MapReduceProblemD {
  MapReduce kernel; // containing the number of mappers, shufflers and reducers, and map and reduce methods
  Map[] mapActors;
  Shuffle[] shuffleActors;
  Reduce[] reduceActors;
  

  // constructor for MapReduceProblem, need to modify for distributed computation
  public MapReduceProblemD(MapReduce mr,Vector theaters) {
    kernel = mr;
    mapActors = new Map[mr.nMappers()];
    System.out.println((String)(theaters.get(0)));
    for (int i = 0; i < mapActors.length; ++i) mapActors[i] = new Map(mr) at  
        (new UAN("uan://"+theaters.get(0)+"/map"+i), 
         new UAL("rmsp://"+theaters.get(Math.min((i%theaters.size())+1,theaters.size()-1)))
        );
    shuffleActors = new Shuffle[mr.nShufflers()];
    for (int i = 0; i < shuffleActors.length; ++i) shuffleActors[i] = new Shuffle(mr) at  
        (new UAN("uan://"+theaters.get(0)+"/shuf"+i), 
         new UAL("rmsp://"+theaters.get(Math.min((i%theaters.size())+1,theaters.size()-1)))
        ); // change the constructor of the Shuffle behavior according to your own definition
    reduceActors = new Reduce[mr.nReducers()];
    for (int i = 0; i < reduceActors.length; ++i) reduceActors[i] = new Reduce(mr) at  
        (new UAN("uan://"+theaters.get(0)+"/redu"+i), 
         new UAL("rmsp://"+theaters.get(Math.min((i%theaters.size())+1,theaters.size()-1)))
        );
  }

  // TODO: define the framework with functions of the kernel, define the Shuffle behavior, and distribute work among mappers, shufflers and reducers 
  
  Vector theaterRead(String t) 
  {
    Vector theater = new Vector();
    String path = t;
    BufferedReader br ;
    try {
      br = new BufferedReader(new FileReader(path));
      for (int i =0;  i < 4; i++)
      {
        String line = br.readLine();
        if (line == null)
        {
          break;
        }
        else
        {
          theater.add(line);
        }

      }
      br.close();
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
  

    return theater;
  }




  int hashF(String val, int nActors) {
    int sum = 0;
    for (int i = 0; i < val.length(); i++){
      sum += (int)  val.charAt(i);
    }
    return sum % nActors;
  }


Vector bubbleSort(Vector vec){
  Pair temp;
  for (int i = 0; i < vec.size()-1; i++){
    for (int j = 1; j < vec.size(); j++){
      String str1  = ((String) (((Pair)vec.get(j-1)).key));
      String str2 = ((String) (((Pair) vec.get(j)).key));
      if (str1.compareTo(str2)>=0){
        temp = (Pair)(vec.get(j-1));
        vec.set(j-1, (Pair)vec.get(j));
        vec.set(j, temp);
      }
    }
  }
  return vec;
}



  void format(Object [] a,String outputF)
  {
    Vector results = new Vector();
    for (int i =0; i < a.length; i++)
    {
      results.add((Pair) a[i]);
    }
    Vector results0 = bubbleSort(results);
    output(results0,outputF);
  }

  void reduce_func(Object[] a, String output)
  {
    
    Vector shuf_vec = new Vector();
    for (int i =0; i < a.length; i++)
    {
      Vector temp = (Vector) (a[i]);
      for (int j =0; j < temp.size(); j++)
      {
        Pair p = (Pair) (temp.get(j));
        shuf_vec.add(p);
      }
    }
    join
    {
        
        for (int i =0; i < shuf_vec.size(); i++ )
        {
          reduceActors[i % reduceActors.length] <- reduce(shuf_vec.get(i));
        }
    }@format(token,output);
  
  }

  void shuffle_func(Object[] a,String output)
  {
   
    Vector all_pairs = new Vector();
    for (int j =0; j < a.length; j++)
    {
      Vector temp = (Vector) (a[j]);
      for (int i =0; i < temp.size(); i++)
      {
        Pair p = (Pair) (temp.get(i));
        all_pairs.add(p);
      }
    }
   join{
      for (int i =0; i < all_pairs.size(); i++)
      {
        Pair p = (Pair) all_pairs.get(i);
        shuffleActors[hashF((String) p.key, shuffleActors.length)] <- shuffle(p);

      }
    }@
    join{
      for (int i=0; i < shuffleActors.length; i++)
      {
        shuffleActors[i] <- get();
      }
    }@reduce_func(token, output);
    
  }

  void runMapReduce(String inputFilename, String outputFilename) {
    Vector vec0 = new Vector();
    PairReader pr = new PairReader(inputFilename);
    Pair p;
    while ((p = pr.readPair()) != null) vec0.add(p);
    join{
      for (int i =0; i < vec0.size(); ++i){
        mapActors[(i%mapActors.length)]<- map(vec0.get(i));
        
      } 
    }@shuffle_func(token, outputFilename);
  }



  // write a vector of pairs to the output file
  void output(Vector v, String outputFilename) {
    PairWriter pw = new PairWriter(outputFilename);
    for (int i = 0; i < v.size(); ++i) pw.writePair((Pair)v.get(i));
    pw.close();
  }

  // sample usage for character counting kernel, change the kernel to word document frequency after implementing the framework
  void act(String[] args) {
    int m = Integer.parseInt(args[2]); // number of mappers
    int s = Integer.parseInt(args[3]); // number of shufflers
    int r = Integer.parseInt(args[4]); // number of reducers
    String t = (args[5]); // number of theaters
    MapReduce cc = new CharCountMapReduce(m, s, r);
    Vector theaters =  theaterRead(t);
    MapReduceProblemD charCount = new MapReduceProblemD(cc,theaters);
    String inputFilename = args[0];
    String outputFilename = args[1];
    charCount <- runMapReduce(inputFilename, outputFilename);
  }
}

